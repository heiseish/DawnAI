// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: image_recognition_service.proto

#ifndef PROTOBUF_INCLUDED_image_5frecognition_5fservice_2eproto
#define PROTOBUF_INCLUDED_image_5frecognition_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_image_5frecognition_5fservice_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_image_5frecognition_5fservice_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_image_5frecognition_5fservice_2eproto();
namespace ImageRecognitionServiceRPC {
class ImageRequest;
class ImageRequestDefaultTypeInternal;
extern ImageRequestDefaultTypeInternal _ImageRequest_default_instance_;
class ImageResponse;
class ImageResponseDefaultTypeInternal;
extern ImageResponseDefaultTypeInternal _ImageResponse_default_instance_;
}  // namespace ImageRecognitionServiceRPC
namespace google {
namespace protobuf {
template<> ::ImageRecognitionServiceRPC::ImageRequest* Arena::CreateMaybeMessage<::ImageRecognitionServiceRPC::ImageRequest>(Arena*);
template<> ::ImageRecognitionServiceRPC::ImageResponse* Arena::CreateMaybeMessage<::ImageRecognitionServiceRPC::ImageResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace ImageRecognitionServiceRPC {

enum ImageResponse_State {
  ImageResponse_State_SUCCESS = 0,
  ImageResponse_State_MODEL_ERR = 1,
  ImageResponse_State_UNKNOWN = 2,
  ImageResponse_State_ImageResponse_State_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  ImageResponse_State_ImageResponse_State_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool ImageResponse_State_IsValid(int value);
const ImageResponse_State ImageResponse_State_State_MIN = ImageResponse_State_SUCCESS;
const ImageResponse_State ImageResponse_State_State_MAX = ImageResponse_State_UNKNOWN;
const int ImageResponse_State_State_ARRAYSIZE = ImageResponse_State_State_MAX + 1;

const ::google::protobuf::EnumDescriptor* ImageResponse_State_descriptor();
inline const ::std::string& ImageResponse_State_Name(ImageResponse_State value) {
  return ::google::protobuf::internal::NameOfEnum(
    ImageResponse_State_descriptor(), value);
}
inline bool ImageResponse_State_Parse(
    const ::std::string& name, ImageResponse_State* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ImageResponse_State>(
    ImageResponse_State_descriptor(), name, value);
}
// ===================================================================

class ImageRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ImageRecognitionServiceRPC.ImageRequest) */ {
 public:
  ImageRequest();
  virtual ~ImageRequest();

  ImageRequest(const ImageRequest& from);

  inline ImageRequest& operator=(const ImageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ImageRequest(ImageRequest&& from) noexcept
    : ImageRequest() {
    *this = ::std::move(from);
  }

  inline ImageRequest& operator=(ImageRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ImageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImageRequest* internal_default_instance() {
    return reinterpret_cast<const ImageRequest*>(
               &_ImageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ImageRequest* other);
  friend void swap(ImageRequest& a, ImageRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ImageRequest* New() const final {
    return CreateMaybeMessage<ImageRequest>(nullptr);
  }

  ImageRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ImageRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ImageRequest& from);
  void MergeFrom(const ImageRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string trans_id = 1;
  void clear_trans_id();
  static const int kTransIdFieldNumber = 1;
  const ::std::string& trans_id() const;
  void set_trans_id(const ::std::string& value);
  #if LANG_CXX11
  void set_trans_id(::std::string&& value);
  #endif
  void set_trans_id(const char* value);
  void set_trans_id(const char* value, size_t size);
  ::std::string* mutable_trans_id();
  ::std::string* release_trans_id();
  void set_allocated_trans_id(::std::string* trans_id);

  // string image = 2;
  void clear_image();
  static const int kImageFieldNumber = 2;
  const ::std::string& image() const;
  void set_image(const ::std::string& value);
  #if LANG_CXX11
  void set_image(::std::string&& value);
  #endif
  void set_image(const char* value);
  void set_image(const char* value, size_t size);
  ::std::string* mutable_image();
  ::std::string* release_image();
  void set_allocated_image(::std::string* image);

  // @@protoc_insertion_point(class_scope:ImageRecognitionServiceRPC.ImageRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr trans_id_;
  ::google::protobuf::internal::ArenaStringPtr image_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_image_5frecognition_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ImageResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ImageRecognitionServiceRPC.ImageResponse) */ {
 public:
  ImageResponse();
  virtual ~ImageResponse();

  ImageResponse(const ImageResponse& from);

  inline ImageResponse& operator=(const ImageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ImageResponse(ImageResponse&& from) noexcept
    : ImageResponse() {
    *this = ::std::move(from);
  }

  inline ImageResponse& operator=(ImageResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ImageResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImageResponse* internal_default_instance() {
    return reinterpret_cast<const ImageResponse*>(
               &_ImageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ImageResponse* other);
  friend void swap(ImageResponse& a, ImageResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ImageResponse* New() const final {
    return CreateMaybeMessage<ImageResponse>(nullptr);
  }

  ImageResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ImageResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ImageResponse& from);
  void MergeFrom(const ImageResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ImageResponse_State State;
  static const State SUCCESS =
    ImageResponse_State_SUCCESS;
  static const State MODEL_ERR =
    ImageResponse_State_MODEL_ERR;
  static const State UNKNOWN =
    ImageResponse_State_UNKNOWN;
  static inline bool State_IsValid(int value) {
    return ImageResponse_State_IsValid(value);
  }
  static const State State_MIN =
    ImageResponse_State_State_MIN;
  static const State State_MAX =
    ImageResponse_State_State_MAX;
  static const int State_ARRAYSIZE =
    ImageResponse_State_State_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  State_descriptor() {
    return ImageResponse_State_descriptor();
  }
  static inline const ::std::string& State_Name(State value) {
    return ImageResponse_State_Name(value);
  }
  static inline bool State_Parse(const ::std::string& name,
      State* value) {
    return ImageResponse_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string trans_id = 1;
  void clear_trans_id();
  static const int kTransIdFieldNumber = 1;
  const ::std::string& trans_id() const;
  void set_trans_id(const ::std::string& value);
  #if LANG_CXX11
  void set_trans_id(::std::string&& value);
  #endif
  void set_trans_id(const char* value);
  void set_trans_id(const char* value, size_t size);
  ::std::string* mutable_trans_id();
  ::std::string* release_trans_id();
  void set_allocated_trans_id(::std::string* trans_id);

  // string text = 3;
  void clear_text();
  static const int kTextFieldNumber = 3;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // .ImageRecognitionServiceRPC.ImageResponse.State state = 2;
  void clear_state();
  static const int kStateFieldNumber = 2;
  ::ImageRecognitionServiceRPC::ImageResponse_State state() const;
  void set_state(::ImageRecognitionServiceRPC::ImageResponse_State value);

  // @@protoc_insertion_point(class_scope:ImageRecognitionServiceRPC.ImageResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr trans_id_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  int state_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_image_5frecognition_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ImageRequest

// string trans_id = 1;
inline void ImageRequest::clear_trans_id() {
  trans_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ImageRequest::trans_id() const {
  // @@protoc_insertion_point(field_get:ImageRecognitionServiceRPC.ImageRequest.trans_id)
  return trans_id_.GetNoArena();
}
inline void ImageRequest::set_trans_id(const ::std::string& value) {
  
  trans_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ImageRecognitionServiceRPC.ImageRequest.trans_id)
}
#if LANG_CXX11
inline void ImageRequest::set_trans_id(::std::string&& value) {
  
  trans_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ImageRecognitionServiceRPC.ImageRequest.trans_id)
}
#endif
inline void ImageRequest::set_trans_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  trans_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ImageRecognitionServiceRPC.ImageRequest.trans_id)
}
inline void ImageRequest::set_trans_id(const char* value, size_t size) {
  
  trans_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ImageRecognitionServiceRPC.ImageRequest.trans_id)
}
inline ::std::string* ImageRequest::mutable_trans_id() {
  
  // @@protoc_insertion_point(field_mutable:ImageRecognitionServiceRPC.ImageRequest.trans_id)
  return trans_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImageRequest::release_trans_id() {
  // @@protoc_insertion_point(field_release:ImageRecognitionServiceRPC.ImageRequest.trans_id)
  
  return trans_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageRequest::set_allocated_trans_id(::std::string* trans_id) {
  if (trans_id != nullptr) {
    
  } else {
    
  }
  trans_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trans_id);
  // @@protoc_insertion_point(field_set_allocated:ImageRecognitionServiceRPC.ImageRequest.trans_id)
}

// string image = 2;
inline void ImageRequest::clear_image() {
  image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ImageRequest::image() const {
  // @@protoc_insertion_point(field_get:ImageRecognitionServiceRPC.ImageRequest.image)
  return image_.GetNoArena();
}
inline void ImageRequest::set_image(const ::std::string& value) {
  
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ImageRecognitionServiceRPC.ImageRequest.image)
}
#if LANG_CXX11
inline void ImageRequest::set_image(::std::string&& value) {
  
  image_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ImageRecognitionServiceRPC.ImageRequest.image)
}
#endif
inline void ImageRequest::set_image(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ImageRecognitionServiceRPC.ImageRequest.image)
}
inline void ImageRequest::set_image(const char* value, size_t size) {
  
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ImageRecognitionServiceRPC.ImageRequest.image)
}
inline ::std::string* ImageRequest::mutable_image() {
  
  // @@protoc_insertion_point(field_mutable:ImageRecognitionServiceRPC.ImageRequest.image)
  return image_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImageRequest::release_image() {
  // @@protoc_insertion_point(field_release:ImageRecognitionServiceRPC.ImageRequest.image)
  
  return image_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageRequest::set_allocated_image(::std::string* image) {
  if (image != nullptr) {
    
  } else {
    
  }
  image_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image);
  // @@protoc_insertion_point(field_set_allocated:ImageRecognitionServiceRPC.ImageRequest.image)
}

// -------------------------------------------------------------------

// ImageResponse

// string trans_id = 1;
inline void ImageResponse::clear_trans_id() {
  trans_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ImageResponse::trans_id() const {
  // @@protoc_insertion_point(field_get:ImageRecognitionServiceRPC.ImageResponse.trans_id)
  return trans_id_.GetNoArena();
}
inline void ImageResponse::set_trans_id(const ::std::string& value) {
  
  trans_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ImageRecognitionServiceRPC.ImageResponse.trans_id)
}
#if LANG_CXX11
inline void ImageResponse::set_trans_id(::std::string&& value) {
  
  trans_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ImageRecognitionServiceRPC.ImageResponse.trans_id)
}
#endif
inline void ImageResponse::set_trans_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  trans_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ImageRecognitionServiceRPC.ImageResponse.trans_id)
}
inline void ImageResponse::set_trans_id(const char* value, size_t size) {
  
  trans_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ImageRecognitionServiceRPC.ImageResponse.trans_id)
}
inline ::std::string* ImageResponse::mutable_trans_id() {
  
  // @@protoc_insertion_point(field_mutable:ImageRecognitionServiceRPC.ImageResponse.trans_id)
  return trans_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImageResponse::release_trans_id() {
  // @@protoc_insertion_point(field_release:ImageRecognitionServiceRPC.ImageResponse.trans_id)
  
  return trans_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageResponse::set_allocated_trans_id(::std::string* trans_id) {
  if (trans_id != nullptr) {
    
  } else {
    
  }
  trans_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trans_id);
  // @@protoc_insertion_point(field_set_allocated:ImageRecognitionServiceRPC.ImageResponse.trans_id)
}

// .ImageRecognitionServiceRPC.ImageResponse.State state = 2;
inline void ImageResponse::clear_state() {
  state_ = 0;
}
inline ::ImageRecognitionServiceRPC::ImageResponse_State ImageResponse::state() const {
  // @@protoc_insertion_point(field_get:ImageRecognitionServiceRPC.ImageResponse.state)
  return static_cast< ::ImageRecognitionServiceRPC::ImageResponse_State >(state_);
}
inline void ImageResponse::set_state(::ImageRecognitionServiceRPC::ImageResponse_State value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:ImageRecognitionServiceRPC.ImageResponse.state)
}

// string text = 3;
inline void ImageResponse::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ImageResponse::text() const {
  // @@protoc_insertion_point(field_get:ImageRecognitionServiceRPC.ImageResponse.text)
  return text_.GetNoArena();
}
inline void ImageResponse::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ImageRecognitionServiceRPC.ImageResponse.text)
}
#if LANG_CXX11
inline void ImageResponse::set_text(::std::string&& value) {
  
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ImageRecognitionServiceRPC.ImageResponse.text)
}
#endif
inline void ImageResponse::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ImageRecognitionServiceRPC.ImageResponse.text)
}
inline void ImageResponse::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ImageRecognitionServiceRPC.ImageResponse.text)
}
inline ::std::string* ImageResponse::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:ImageRecognitionServiceRPC.ImageResponse.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImageResponse::release_text() {
  // @@protoc_insertion_point(field_release:ImageRecognitionServiceRPC.ImageResponse.text)
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageResponse::set_allocated_text(::std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:ImageRecognitionServiceRPC.ImageResponse.text)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ImageRecognitionServiceRPC

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ImageRecognitionServiceRPC::ImageResponse_State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ImageRecognitionServiceRPC::ImageResponse_State>() {
  return ::ImageRecognitionServiceRPC::ImageResponse_State_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_image_5frecognition_5fservice_2eproto
